/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package CapaPresentacion;

import CapaDatos.ProductoDAO;
import CapaEntidad.Producto;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author ASUS
 */
public class jifActualizarStock extends javax.swing.JInternalFrame {

    /**
     * Creates new form jifActualizarStock
     */
    public jifActualizarStock() {
        initComponents();
        setClosable(true);
        jtfStockActual.setEditable(false);
        jtfStockActual.setFocusable(false); // evita que se pueda hacer clic
        jtfStockActual.setBackground(new java.awt.Color(240, 240, 240)); // color gris claro
        cargarProductos();
        
        jcProductos.addActionListener(e -> {
            int index = jcProductos.getSelectedIndex();
            if (index > 0) {
                try {
                    String item = (String) jcProductos.getSelectedItem();
                    String idProducto = item.split(" - ")[0];

                    ProductoDAO dao = new ProductoDAO();
                    Producto p = dao.obtenerPorId(idProducto);  // Debes tener este método implementado
                    jtfStockActual.setText(String.valueOf(p.getStock()));
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error al obtener stock: " + ex.getMessage());
                }
            } else {
                jtfStockActual.setText("");
            }
        });

    }
    
    private void cargarProductos() {
        try {
            ProductoDAO dao = new ProductoDAO();
            List<Producto> productos = dao.listarTodos();

            jcProductos.removeAllItems();
            jcProductos.addItem("Seleccione el producto");
            for (Producto p : productos) {
                jcProductos.addItem(p.getIdProducto() + " - " + p.getNombre());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar productos: " + e.getMessage());
        }
    }
    
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcProductos = new javax.swing.JComboBox();
        jtfStockActual = new javax.swing.JTextField();
        jtfStockNuevo = new javax.swing.JTextField();
        jbActualizarStock = new javax.swing.JButton();

        jLabel1.setText("Producto");

        jLabel2.setText("Stock Actual");

        jLabel3.setText("Nuevo Stock");

        jbActualizarStock.setText("Actualizar Stock");
        jbActualizarStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarStockActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18))
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbActualizarStock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcProductos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtfStockActual)
                    .addComponent(jtfStockNuevo))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jtfStockActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfStockNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jbActualizarStock)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbActualizarStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarStockActionPerformed
        // TODO add your handling code here:
        int index = jcProductos.getSelectedIndex();

        if (index > 0) {
            String item = (String) jcProductos.getSelectedItem();
            String idProducto = item.split(" - ")[0];

            try {
                int stockActual = Integer.parseInt(jtfStockActual.getText().trim());
                int stockNuevo = Integer.parseInt(jtfStockNuevo.getText().trim());

                if (stockNuevo <= 0) {
                    JOptionPane.showMessageDialog(this, "El nuevo stock debe ser mayor a 0");
                    return;
                }

                int nuevoTotal = stockActual + stockNuevo;

                ProductoDAO dao = new ProductoDAO();
                dao.actualizarStock(idProducto, nuevoTotal); // Implementar este método en DAO

                JOptionPane.showMessageDialog(this, "✅ Stock actualizado correctamente");
                jtfStockActual.setText(String.valueOf(nuevoTotal));
                jtfStockNuevo.setText("");

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "El stock debe ser un número válido");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al actualizar stock: " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona un producto");
        }
    }//GEN-LAST:event_jbActualizarStockActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jbActualizarStock;
    private javax.swing.JComboBox jcProductos;
    private javax.swing.JTextField jtfStockActual;
    private javax.swing.JTextField jtfStockNuevo;
    // End of variables declaration//GEN-END:variables
}
