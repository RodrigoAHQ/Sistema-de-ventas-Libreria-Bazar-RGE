/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package CapaPresentacion;

import CapaDatos.CategoriaDAO;
import CapaEntidad.Categoria;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class jifGestionCategoria extends javax.swing.JInternalFrame {

    /**
     * Creates new form jmiGestionCategoria
     */
    public jifGestionCategoria() {
        initComponents();
        setClosable(true);
        listarCategorias();
        jpCategoria.add(jmiSelecionar);
        jtCategoria.setComponentPopupMenu(jpCategoria);
        setClosable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void listarCategorias() {
        try {
            CategoriaDAO dao = new CategoriaDAO();
            List<Categoria> lista = dao.listarTodos();

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");
            model.addColumn("Nombre");

            for (Categoria c : lista) {
                model.addRow(new Object[]{c.getIdCategoria(), c.getNombreCat()});
            }

            jtCategoria.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al listar categorías: " + e.getMessage());
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jmiSelecionar = new javax.swing.JMenuItem();
        jpCategoria = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtCategoria = new javax.swing.JTable();
        jbActualizar = new javax.swing.JButton();
        jbEliminar = new javax.swing.JButton();
        jtfNombreCat = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jmiSelecionar.setText("Seleccionar");
        jmiSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSelecionarActionPerformed(evt);
            }
        });

        jtCategoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtCategoria);

        jbActualizar.setText("Actualizar");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbEliminar.setText("Eliminar");
        jbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbEliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfNombreCat, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(16, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jbActualizar)
                        .addGap(18, 18, 18)
                        .addComponent(jbEliminar)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jtfNombreCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSelecionarActionPerformed
        // TODO add your handling code here:
            int fila = jtCategoria.getSelectedRow();
            if (fila >= 0) {
                String nombreCategoria = jtCategoria.getValueAt(fila, 1).toString(); // columna 1 = Nombre
                jtfNombreCat.setText(nombreCategoria);
            } else {
                JOptionPane.showMessageDialog(this, "Selecciona una categoría de la tabla.");
            }
    }//GEN-LAST:event_jmiSelecionarActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        // TODO add your handling code here:
            int fila = jtCategoria.getSelectedRow();
            if (fila >= 0) {
                // Obtener ID y nuevo nombre
                String idCategoria = jtCategoria.getValueAt(fila, 0).toString();  // Columna 0: ID
                String nuevoNombre = jtfNombreCat.getText().trim();

                if (!nuevoNombre.isEmpty()) {
                    try {
                        CategoriaDAO dao = new CategoriaDAO();

                        // Creamos una instancia anónima de Categoria (porque sigue siendo abstracta)
                        Categoria categoria = new Categoria(idCategoria, nuevoNombre) {
                            @Override
                            public String getCategoria() {
                                return getNombreCat();
                            }
                        };

                        dao.actualizar(categoria);
                        JOptionPane.showMessageDialog(this, "Categoría actualizada correctamente");

                        listarCategorias();  // Recargar la tabla
                        jtfNombreCat.setText(""); // Limpiar el campo

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Error al actualizar: " + e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "El nombre no puede estar vacío.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecciona una categoría de la tabla.");
            }        
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarActionPerformed
        // TODO add your handling code here:
            int fila = jtCategoria.getSelectedRow();

            if (fila >= 0) {
                String idCategoria = jtCategoria.getValueAt(fila, 0).toString();
                String nombre = jtCategoria.getValueAt(fila, 1).toString();

                int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "¿Estás seguro de eliminar la categoría: " + nombre + "?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION
                );

                if (confirm == JOptionPane.YES_OPTION) {
                    try {
                        CategoriaDAO dao = new CategoriaDAO();
                        dao.eliminar(idCategoria);

                        JOptionPane.showMessageDialog(this, "Categoría eliminada correctamente");
                        listarCategorias(); // Recargar tabla
                        jtfNombreCat.setText(""); // Limpiar campo

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Error al eliminar: " + e.getMessage());
                    }
                }

            } else {
                JOptionPane.showMessageDialog(this, "Selecciona una categoría de la tabla.");
            }
    }//GEN-LAST:event_jbEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbEliminar;
    private javax.swing.JMenuItem jmiSelecionar;
    private javax.swing.JPopupMenu jpCategoria;
    private javax.swing.JTable jtCategoria;
    private javax.swing.JTextField jtfNombreCat;
    // End of variables declaration//GEN-END:variables
}
